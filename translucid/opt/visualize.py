# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/04_opt.ipynb.

# %% auto 0
__all__ = ['Visualizer', 'to_inception_tf', 'to_inception']

# %% ../../nbs/04_opt.ipynb 2
import torch.optim as opt
import matplotlib.pyplot as plt
import torchvision.transforms as T
from fastprogress import progress_bar
import fastcore.all as fc
from ..param.image import *

# %% ../../nbs/04_opt.ipynb 3
class Visualizer:
    def __init__(self, model, obj, target: ImageParam, optim=opt.Adam, tfms=None):
        self.model, self.obj, self.target, self.optim = model, obj, target, optim
        self.tfms = tfms or default_transforms(target.orig_shape[-1])
        if not callable(self.tfms): self.tfms = T.Compose(self.tfms)
    
    def visualize(self, x: ImageParam = None, lr = 5e-2, n_iter = 1000, mb=None, param_kwargs=None):
        _x = fc.ifnone(x, self.target)
        optim = self.optim([_x], lr=lr)
        
        pb = progress_bar(range(n_iter), parent=mb)
        for i in pb:
            optim.zero_grad()
            x = self.prep_x(_x, param_kwargs)
            loss = self.obj(self.model, x)
            loss.backward()
            optim.step()
            pb.comment = f'Loss: {loss.item()/len(x)}'
            if i % 100 == 0:
                print(f'Iteration {i}, loss: {loss.item()/len(x)}')
        return _x
    
    def prep_x(self, x, param_kwargs=None):
        if isinstance(x, ImageParam): x = x.to_img(**(param_kwargs or {}))
        return self.tfms(x)

# %% ../../nbs/04_opt.ipynb 4
def to_inception_tf(img): return img * 255 - 117

def to_inception():
    return T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
